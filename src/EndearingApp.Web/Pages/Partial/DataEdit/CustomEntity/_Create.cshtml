@using EndearingApp.Web.Exstensions;
@using EndearingApp.Core.CustomEntityAggregate;
@using EndearingApp.Web.Models
@model IEnumerable<CustomeEntityDTO>

<form 
    style="border:1px soid black; display:flex; margin 10px; flex-direction:column; width: 300px"
    id="customEntityForm" 
    onsubmit="sendData(); return false;">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required>

    <h3>Fields</h3>
    <div id="fieldsContainer">
        <!-- Fields will be dynamically added here -->
    </div>
    <button type="button" onclick="addField()">Add Field</button>

    <h3>Relationships</h3>
    <div id="relationshipsContainer">
        <!-- Relationships will be dynamically added here -->
    </div>
    <button type="button" onclick="addRelationship()">Add Relationship</button>

    <input type="submit" value="Submit">
</form>

<script>
    debugger;
    let customeEntitites = {};
    customeEntitites = util.toJS(@Html.ToJson(Model));
    function fillForm(id) {
        var customEntity = customeEntitites.find(x => x.id == id);
        console.log(customEntity);
    }
    function addField(obj) {

        const container = document.getElementById('fieldsContainer');
        const index = container.children.length; // Unique index for each field
        const fieldHTML = `
                      <div style="border-top:1px solid black; margin-top: 5px">
                    <input type="text"  placeholder="Name" name="fieldName[]" required>
                    <input type="text" placeholder="Type" name="fieldType[]" required>
                    <input type="checkbox" id="isPrimaryKey${index}" name="isPrimaryKey[]">
                    <label for="isPrimaryKey${index}">Is Primary Key</label>
                    <!-- Extend with other properties as needed -->
                  </div>
                `;
        container.insertAdjacentHTML('beforeend', fieldHTML);
    }

    function addRelationship() {
        const container = document.getElementById('relationshipsContainer');
        const relationshipHTML = `
                    <div style="border-top:1px solid black; margin-top: 5px">
                    <input type="text" placeholder="Source Field Name" name="sourceFieldName[]" required>
                    <select name="referencedTableId[]" onchange="updateFieldOptions(this)">
                      <option value="">Select Table</option>
                        @{
                            foreach (var entity in Model!)
                            {
                                        <option value="@entity.Id">@entity.Name</option>
                            }
                        }
                    </select>
                    <select name="referencedFieldId[]" disabled>
                      <option value="">Select Field</option>
                    </select>
                    <input type="text" placeholder="Constraint Name" name="constraintName[]" required>
                  </div>
                `;
        container.insertAdjacentHTML('beforeend', relationshipHTML);
    }

    function updateFieldOptions(selectElement) {
        const fieldsSelect = selectElement.nextElementSibling;
        const selectedTableId = selectElement.value;
        fieldsSelect.innerHTML = '<option value="">Select Field</option>'; // Reset field options
        if (!selectedTableId) {
            fieldsSelect.disabled = true;
            return;
        }

        // Assuming Model.CustomEntities can somehow be accessed or equivalent data can be provided
        const selectedTable = customeEntitites.find(entity => entity.id === selectedTableId);
        if (selectedTable) {
            selectedTable.fields.forEach(field => {
                const option = new Option(field.name, field.id);
                fieldsSelect.options.add(option);
            });
            fieldsSelect.disabled = false;
        }
    }

    function sendData() {
        const formData = new FormData(document.getElementById('customEntityForm'));

        const customEntityDTO = {
            Name: formData.get('name'),
            Fields: [],
            Relationships: []
        };

        // Process fields
        const fieldNames = formData.getAll('fieldName[]');
        const fieldTypes = formData.getAll('fieldType[]');
        const isPrimaryKeys = formData.getAll('isPrimaryKey[]').map((value, index) =>
            document.querySelector(`#fieldsContainer div:nth-child(${index + 1}) input[type="checkbox"]`).checked);

        fieldNames.forEach((name, index) => {
            customEntityDTO.Fields.push({
                Name: name,
                Type: fieldTypes[index],
                IsPrimaryKey: isPrimaryKeys[index] || false
                // Add other field-specific properties here as necessary
            });
        });

        // Process relationships
        const sourceFieldNames = formData.getAll('sourceFieldName[]');
        const referencedTableIds = formData.getAll('referencedTableId[]');
        const referencedFieldIds = formData.getAll('referencedFieldId[]');
        const constraintNames = formData.getAll('constraintName[]');

        sourceFieldNames.forEach((sourceFieldName, index) => {
            if (referencedTableIds[index] && referencedFieldIds[index]) { // Ensuring both are selected
                customEntityDTO.Relationships.push({
                    SourceFieldName: sourceFieldName,
                    ReferencedCustomEntityId: referencedTableIds[index],
                    ReferencedFieldId: referencedFieldIds[index],
                    ConstraintName: constraintNames[index]
                });
            }
        });

        // Submit data
        fetch('/CustomEntity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(customEntityDTO),
        })
            .then(response => response.json())
            .then(data => console.log('Success:', data))
            .catch((error) => console.error('Error:', error));
    }

    // Initialize form with one field and one relationship input set

</script>