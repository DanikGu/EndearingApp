/*
 * EndearingApp.Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import CustomAttributeData from './CustomAttributeData';
import EventAttributes from './EventAttributes';
import MemberTypes from './MemberTypes';
import MethodInfo from './MethodInfo';
import Module from './Module';
import Type from './Type';

/**
 * The EventInfo model module.
 * @module model/EventInfo
 * @version 1.0
 */
export default class EventInfo {
  /**
   * Constructs a new <code>EventInfo</code>.
   * @alias module:model/EventInfo
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>EventInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventInfo} obj Optional instance to populate.
   * @return {module:model/EventInfo} The populated <code>EventInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EventInfo();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('declaringType'))
        obj.declaringType = Type.constructFromObject(data['declaringType']);
      if (data.hasOwnProperty('reflectedType'))
        obj.reflectedType = Type.constructFromObject(data['reflectedType']);
      if (data.hasOwnProperty('module'))
        obj.module = Module.constructFromObject(data['module']);
      if (data.hasOwnProperty('customAttributes'))
        obj.customAttributes = ApiClient.convertToType(data['customAttributes'], [CustomAttributeData]);
      if (data.hasOwnProperty('isCollectible'))
        obj.isCollectible = ApiClient.convertToType(data['isCollectible'], 'Boolean');
      if (data.hasOwnProperty('metadataToken'))
        obj.metadataToken = ApiClient.convertToType(data['metadataToken'], 'Number');
      if (data.hasOwnProperty('memberType'))
        obj.memberType = MemberTypes.constructFromObject(data['memberType']);
      if (data.hasOwnProperty('attributes'))
        obj.attributes = EventAttributes.constructFromObject(data['attributes']);
      if (data.hasOwnProperty('isSpecialName'))
        obj.isSpecialName = ApiClient.convertToType(data['isSpecialName'], 'Boolean');
      if (data.hasOwnProperty('addMethod'))
        obj.addMethod = MethodInfo.constructFromObject(data['addMethod']);
      if (data.hasOwnProperty('removeMethod'))
        obj.removeMethod = MethodInfo.constructFromObject(data['removeMethod']);
      if (data.hasOwnProperty('raiseMethod'))
        obj.raiseMethod = MethodInfo.constructFromObject(data['raiseMethod']);
      if (data.hasOwnProperty('isMulticast'))
        obj.isMulticast = ApiClient.convertToType(data['isMulticast'], 'Boolean');
      if (data.hasOwnProperty('eventHandlerType'))
        obj.eventHandlerType = Type.constructFromObject(data['eventHandlerType']);
    }
    return obj;
  }
}

/**
 * @member {String} name
 */
EventInfo.prototype.name = undefined;

/**
 * @member {module:model/Type} declaringType
 */
EventInfo.prototype.declaringType = undefined;

/**
 * @member {module:model/Type} reflectedType
 */
EventInfo.prototype.reflectedType = undefined;

/**
 * @member {module:model/Module} module
 */
EventInfo.prototype.module = undefined;

/**
 * @member {Array.<module:model/CustomAttributeData>} customAttributes
 */
EventInfo.prototype.customAttributes = undefined;

/**
 * @member {Boolean} isCollectible
 */
EventInfo.prototype.isCollectible = undefined;

/**
 * @member {Number} metadataToken
 */
EventInfo.prototype.metadataToken = undefined;

/**
 * @member {module:model/MemberTypes} memberType
 */
EventInfo.prototype.memberType = undefined;

/**
 * @member {module:model/EventAttributes} attributes
 */
EventInfo.prototype.attributes = undefined;

/**
 * @member {Boolean} isSpecialName
 */
EventInfo.prototype.isSpecialName = undefined;

/**
 * @member {module:model/MethodInfo} addMethod
 */
EventInfo.prototype.addMethod = undefined;

/**
 * @member {module:model/MethodInfo} removeMethod
 */
EventInfo.prototype.removeMethod = undefined;

/**
 * @member {module:model/MethodInfo} raiseMethod
 */
EventInfo.prototype.raiseMethod = undefined;

/**
 * @member {Boolean} isMulticast
 */
EventInfo.prototype.isMulticast = undefined;

/**
 * @member {module:model/Type} eventHandlerType
 */
EventInfo.prototype.eventHandlerType = undefined;

