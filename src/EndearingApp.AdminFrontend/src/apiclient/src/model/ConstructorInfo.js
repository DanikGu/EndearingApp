/*
 * EndearingApp.Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import CallingConventions from './CallingConventions';
import CustomAttributeData from './CustomAttributeData';
import MemberTypes from './MemberTypes';
import MethodAttributes from './MethodAttributes';
import MethodImplAttributes from './MethodImplAttributes';
import Module from './Module';
import RuntimeMethodHandle from './RuntimeMethodHandle';
import Type from './Type';

/**
 * The ConstructorInfo model module.
 * @module model/ConstructorInfo
 * @version 1.0
 */
export default class ConstructorInfo {
  /**
   * Constructs a new <code>ConstructorInfo</code>.
   * @alias module:model/ConstructorInfo
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ConstructorInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ConstructorInfo} obj Optional instance to populate.
   * @return {module:model/ConstructorInfo} The populated <code>ConstructorInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ConstructorInfo();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('declaringType'))
        obj.declaringType = Type.constructFromObject(data['declaringType']);
      if (data.hasOwnProperty('reflectedType'))
        obj.reflectedType = Type.constructFromObject(data['reflectedType']);
      if (data.hasOwnProperty('module'))
        obj.module = Module.constructFromObject(data['module']);
      if (data.hasOwnProperty('customAttributes'))
        obj.customAttributes = ApiClient.convertToType(data['customAttributes'], [CustomAttributeData]);
      if (data.hasOwnProperty('isCollectible'))
        obj.isCollectible = ApiClient.convertToType(data['isCollectible'], 'Boolean');
      if (data.hasOwnProperty('metadataToken'))
        obj.metadataToken = ApiClient.convertToType(data['metadataToken'], 'Number');
      if (data.hasOwnProperty('attributes'))
        obj.attributes = MethodAttributes.constructFromObject(data['attributes']);
      if (data.hasOwnProperty('methodImplementationFlags'))
        obj.methodImplementationFlags = MethodImplAttributes.constructFromObject(data['methodImplementationFlags']);
      if (data.hasOwnProperty('callingConvention'))
        obj.callingConvention = CallingConventions.constructFromObject(data['callingConvention']);
      if (data.hasOwnProperty('isAbstract'))
        obj.isAbstract = ApiClient.convertToType(data['isAbstract'], 'Boolean');
      if (data.hasOwnProperty('isConstructor'))
        obj.isConstructor = ApiClient.convertToType(data['isConstructor'], 'Boolean');
      if (data.hasOwnProperty('isFinal'))
        obj.isFinal = ApiClient.convertToType(data['isFinal'], 'Boolean');
      if (data.hasOwnProperty('isHideBySig'))
        obj.isHideBySig = ApiClient.convertToType(data['isHideBySig'], 'Boolean');
      if (data.hasOwnProperty('isSpecialName'))
        obj.isSpecialName = ApiClient.convertToType(data['isSpecialName'], 'Boolean');
      if (data.hasOwnProperty('isStatic'))
        obj.isStatic = ApiClient.convertToType(data['isStatic'], 'Boolean');
      if (data.hasOwnProperty('isVirtual'))
        obj.isVirtual = ApiClient.convertToType(data['isVirtual'], 'Boolean');
      if (data.hasOwnProperty('isAssembly'))
        obj.isAssembly = ApiClient.convertToType(data['isAssembly'], 'Boolean');
      if (data.hasOwnProperty('isFamily'))
        obj.isFamily = ApiClient.convertToType(data['isFamily'], 'Boolean');
      if (data.hasOwnProperty('isFamilyAndAssembly'))
        obj.isFamilyAndAssembly = ApiClient.convertToType(data['isFamilyAndAssembly'], 'Boolean');
      if (data.hasOwnProperty('isFamilyOrAssembly'))
        obj.isFamilyOrAssembly = ApiClient.convertToType(data['isFamilyOrAssembly'], 'Boolean');
      if (data.hasOwnProperty('isPrivate'))
        obj.isPrivate = ApiClient.convertToType(data['isPrivate'], 'Boolean');
      if (data.hasOwnProperty('isPublic'))
        obj.isPublic = ApiClient.convertToType(data['isPublic'], 'Boolean');
      if (data.hasOwnProperty('isConstructedGenericMethod'))
        obj.isConstructedGenericMethod = ApiClient.convertToType(data['isConstructedGenericMethod'], 'Boolean');
      if (data.hasOwnProperty('isGenericMethod'))
        obj.isGenericMethod = ApiClient.convertToType(data['isGenericMethod'], 'Boolean');
      if (data.hasOwnProperty('isGenericMethodDefinition'))
        obj.isGenericMethodDefinition = ApiClient.convertToType(data['isGenericMethodDefinition'], 'Boolean');
      if (data.hasOwnProperty('containsGenericParameters'))
        obj.containsGenericParameters = ApiClient.convertToType(data['containsGenericParameters'], 'Boolean');
      if (data.hasOwnProperty('methodHandle'))
        obj.methodHandle = RuntimeMethodHandle.constructFromObject(data['methodHandle']);
      if (data.hasOwnProperty('isSecurityCritical'))
        obj.isSecurityCritical = ApiClient.convertToType(data['isSecurityCritical'], 'Boolean');
      if (data.hasOwnProperty('isSecuritySafeCritical'))
        obj.isSecuritySafeCritical = ApiClient.convertToType(data['isSecuritySafeCritical'], 'Boolean');
      if (data.hasOwnProperty('isSecurityTransparent'))
        obj.isSecurityTransparent = ApiClient.convertToType(data['isSecurityTransparent'], 'Boolean');
      if (data.hasOwnProperty('memberType'))
        obj.memberType = MemberTypes.constructFromObject(data['memberType']);
    }
    return obj;
  }
}

/**
 * @member {String} name
 */
ConstructorInfo.prototype.name = undefined;

/**
 * @member {module:model/Type} declaringType
 */
ConstructorInfo.prototype.declaringType = undefined;

/**
 * @member {module:model/Type} reflectedType
 */
ConstructorInfo.prototype.reflectedType = undefined;

/**
 * @member {module:model/Module} module
 */
ConstructorInfo.prototype.module = undefined;

/**
 * @member {Array.<module:model/CustomAttributeData>} customAttributes
 */
ConstructorInfo.prototype.customAttributes = undefined;

/**
 * @member {Boolean} isCollectible
 */
ConstructorInfo.prototype.isCollectible = undefined;

/**
 * @member {Number} metadataToken
 */
ConstructorInfo.prototype.metadataToken = undefined;

/**
 * @member {module:model/MethodAttributes} attributes
 */
ConstructorInfo.prototype.attributes = undefined;

/**
 * @member {module:model/MethodImplAttributes} methodImplementationFlags
 */
ConstructorInfo.prototype.methodImplementationFlags = undefined;

/**
 * @member {module:model/CallingConventions} callingConvention
 */
ConstructorInfo.prototype.callingConvention = undefined;

/**
 * @member {Boolean} isAbstract
 */
ConstructorInfo.prototype.isAbstract = undefined;

/**
 * @member {Boolean} isConstructor
 */
ConstructorInfo.prototype.isConstructor = undefined;

/**
 * @member {Boolean} isFinal
 */
ConstructorInfo.prototype.isFinal = undefined;

/**
 * @member {Boolean} isHideBySig
 */
ConstructorInfo.prototype.isHideBySig = undefined;

/**
 * @member {Boolean} isSpecialName
 */
ConstructorInfo.prototype.isSpecialName = undefined;

/**
 * @member {Boolean} isStatic
 */
ConstructorInfo.prototype.isStatic = undefined;

/**
 * @member {Boolean} isVirtual
 */
ConstructorInfo.prototype.isVirtual = undefined;

/**
 * @member {Boolean} isAssembly
 */
ConstructorInfo.prototype.isAssembly = undefined;

/**
 * @member {Boolean} isFamily
 */
ConstructorInfo.prototype.isFamily = undefined;

/**
 * @member {Boolean} isFamilyAndAssembly
 */
ConstructorInfo.prototype.isFamilyAndAssembly = undefined;

/**
 * @member {Boolean} isFamilyOrAssembly
 */
ConstructorInfo.prototype.isFamilyOrAssembly = undefined;

/**
 * @member {Boolean} isPrivate
 */
ConstructorInfo.prototype.isPrivate = undefined;

/**
 * @member {Boolean} isPublic
 */
ConstructorInfo.prototype.isPublic = undefined;

/**
 * @member {Boolean} isConstructedGenericMethod
 */
ConstructorInfo.prototype.isConstructedGenericMethod = undefined;

/**
 * @member {Boolean} isGenericMethod
 */
ConstructorInfo.prototype.isGenericMethod = undefined;

/**
 * @member {Boolean} isGenericMethodDefinition
 */
ConstructorInfo.prototype.isGenericMethodDefinition = undefined;

/**
 * @member {Boolean} containsGenericParameters
 */
ConstructorInfo.prototype.containsGenericParameters = undefined;

/**
 * @member {module:model/RuntimeMethodHandle} methodHandle
 */
ConstructorInfo.prototype.methodHandle = undefined;

/**
 * @member {Boolean} isSecurityCritical
 */
ConstructorInfo.prototype.isSecurityCritical = undefined;

/**
 * @member {Boolean} isSecuritySafeCritical
 */
ConstructorInfo.prototype.isSecuritySafeCritical = undefined;

/**
 * @member {Boolean} isSecurityTransparent
 */
ConstructorInfo.prototype.isSecurityTransparent = undefined;

/**
 * @member {module:model/MemberTypes} memberType
 */
ConstructorInfo.prototype.memberType = undefined;

