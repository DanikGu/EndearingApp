/*
 * EndearingApp.Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EndearingAppweb);
  }
}(this, function(expect, EndearingAppweb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TypeInfo', function() {
      beforeEach(function() {
        instance = new EndearingAppweb.TypeInfo();
      });

      it('should create an instance of TypeInfo', function() {
        // TODO: update the code to test TypeInfo
        expect(instance).to.be.a(EndearingAppweb.TypeInfo);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property customAttributes (base name: "customAttributes")', function() {
        // TODO: update the code to test the property customAttributes
        expect(instance).to.have.property('customAttributes');
        // expect(instance.customAttributes).to.be(expectedValueLiteral);
      });

      it('should have the property isCollectible (base name: "isCollectible")', function() {
        // TODO: update the code to test the property isCollectible
        expect(instance).to.have.property('isCollectible');
        // expect(instance.isCollectible).to.be(expectedValueLiteral);
      });

      it('should have the property metadataToken (base name: "metadataToken")', function() {
        // TODO: update the code to test the property metadataToken
        expect(instance).to.have.property('metadataToken');
        // expect(instance.metadataToken).to.be(expectedValueLiteral);
      });

      it('should have the property isInterface (base name: "isInterface")', function() {
        // TODO: update the code to test the property isInterface
        expect(instance).to.have.property('isInterface');
        // expect(instance.isInterface).to.be(expectedValueLiteral);
      });

      it('should have the property memberType (base name: "memberType")', function() {
        // TODO: update the code to test the property memberType
        expect(instance).to.have.property('memberType');
        // expect(instance.memberType).to.be(expectedValueLiteral);
      });

      it('should have the property namespace (base name: "namespace")', function() {
        // TODO: update the code to test the property namespace
        expect(instance).to.have.property('namespace');
        // expect(instance.namespace).to.be(expectedValueLiteral);
      });

      it('should have the property assemblyQualifiedName (base name: "assemblyQualifiedName")', function() {
        // TODO: update the code to test the property assemblyQualifiedName
        expect(instance).to.have.property('assemblyQualifiedName');
        // expect(instance.assemblyQualifiedName).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "fullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property assembly (base name: "assembly")', function() {
        // TODO: update the code to test the property assembly
        expect(instance).to.have.property('assembly');
        // expect(instance.assembly).to.be(expectedValueLiteral);
      });

      it('should have the property module (base name: "module")', function() {
        // TODO: update the code to test the property module
        expect(instance).to.have.property('module');
        // expect(instance.module).to.be(expectedValueLiteral);
      });

      it('should have the property isNested (base name: "isNested")', function() {
        // TODO: update the code to test the property isNested
        expect(instance).to.have.property('isNested');
        // expect(instance.isNested).to.be(expectedValueLiteral);
      });

      it('should have the property declaringType (base name: "declaringType")', function() {
        // TODO: update the code to test the property declaringType
        expect(instance).to.have.property('declaringType');
        // expect(instance.declaringType).to.be(expectedValueLiteral);
      });

      it('should have the property declaringMethod (base name: "declaringMethod")', function() {
        // TODO: update the code to test the property declaringMethod
        expect(instance).to.have.property('declaringMethod');
        // expect(instance.declaringMethod).to.be(expectedValueLiteral);
      });

      it('should have the property reflectedType (base name: "reflectedType")', function() {
        // TODO: update the code to test the property reflectedType
        expect(instance).to.have.property('reflectedType');
        // expect(instance.reflectedType).to.be(expectedValueLiteral);
      });

      it('should have the property underlyingSystemType (base name: "underlyingSystemType")', function() {
        // TODO: update the code to test the property underlyingSystemType
        expect(instance).to.have.property('underlyingSystemType');
        // expect(instance.underlyingSystemType).to.be(expectedValueLiteral);
      });

      it('should have the property isTypeDefinition (base name: "isTypeDefinition")', function() {
        // TODO: update the code to test the property isTypeDefinition
        expect(instance).to.have.property('isTypeDefinition');
        // expect(instance.isTypeDefinition).to.be(expectedValueLiteral);
      });

      it('should have the property isArray (base name: "isArray")', function() {
        // TODO: update the code to test the property isArray
        expect(instance).to.have.property('isArray');
        // expect(instance.isArray).to.be(expectedValueLiteral);
      });

      it('should have the property isByRef (base name: "isByRef")', function() {
        // TODO: update the code to test the property isByRef
        expect(instance).to.have.property('isByRef');
        // expect(instance.isByRef).to.be(expectedValueLiteral);
      });

      it('should have the property isPointer (base name: "isPointer")', function() {
        // TODO: update the code to test the property isPointer
        expect(instance).to.have.property('isPointer');
        // expect(instance.isPointer).to.be(expectedValueLiteral);
      });

      it('should have the property isConstructedGenericType (base name: "isConstructedGenericType")', function() {
        // TODO: update the code to test the property isConstructedGenericType
        expect(instance).to.have.property('isConstructedGenericType');
        // expect(instance.isConstructedGenericType).to.be(expectedValueLiteral);
      });

      it('should have the property isGenericParameter (base name: "isGenericParameter")', function() {
        // TODO: update the code to test the property isGenericParameter
        expect(instance).to.have.property('isGenericParameter');
        // expect(instance.isGenericParameter).to.be(expectedValueLiteral);
      });

      it('should have the property isGenericTypeParameter (base name: "isGenericTypeParameter")', function() {
        // TODO: update the code to test the property isGenericTypeParameter
        expect(instance).to.have.property('isGenericTypeParameter');
        // expect(instance.isGenericTypeParameter).to.be(expectedValueLiteral);
      });

      it('should have the property isGenericMethodParameter (base name: "isGenericMethodParameter")', function() {
        // TODO: update the code to test the property isGenericMethodParameter
        expect(instance).to.have.property('isGenericMethodParameter');
        // expect(instance.isGenericMethodParameter).to.be(expectedValueLiteral);
      });

      it('should have the property isGenericType (base name: "isGenericType")', function() {
        // TODO: update the code to test the property isGenericType
        expect(instance).to.have.property('isGenericType');
        // expect(instance.isGenericType).to.be(expectedValueLiteral);
      });

      it('should have the property isGenericTypeDefinition (base name: "isGenericTypeDefinition")', function() {
        // TODO: update the code to test the property isGenericTypeDefinition
        expect(instance).to.have.property('isGenericTypeDefinition');
        // expect(instance.isGenericTypeDefinition).to.be(expectedValueLiteral);
      });

      it('should have the property isSZArray (base name: "isSZArray")', function() {
        // TODO: update the code to test the property isSZArray
        expect(instance).to.have.property('isSZArray');
        // expect(instance.isSZArray).to.be(expectedValueLiteral);
      });

      it('should have the property isVariableBoundArray (base name: "isVariableBoundArray")', function() {
        // TODO: update the code to test the property isVariableBoundArray
        expect(instance).to.have.property('isVariableBoundArray');
        // expect(instance.isVariableBoundArray).to.be(expectedValueLiteral);
      });

      it('should have the property isByRefLike (base name: "isByRefLike")', function() {
        // TODO: update the code to test the property isByRefLike
        expect(instance).to.have.property('isByRefLike');
        // expect(instance.isByRefLike).to.be(expectedValueLiteral);
      });

      it('should have the property isFunctionPointer (base name: "isFunctionPointer")', function() {
        // TODO: update the code to test the property isFunctionPointer
        expect(instance).to.have.property('isFunctionPointer');
        // expect(instance.isFunctionPointer).to.be(expectedValueLiteral);
      });

      it('should have the property isUnmanagedFunctionPointer (base name: "isUnmanagedFunctionPointer")', function() {
        // TODO: update the code to test the property isUnmanagedFunctionPointer
        expect(instance).to.have.property('isUnmanagedFunctionPointer');
        // expect(instance.isUnmanagedFunctionPointer).to.be(expectedValueLiteral);
      });

      it('should have the property hasElementType (base name: "hasElementType")', function() {
        // TODO: update the code to test the property hasElementType
        expect(instance).to.have.property('hasElementType');
        // expect(instance.hasElementType).to.be(expectedValueLiteral);
      });

      it('should have the property genericTypeArguments (base name: "genericTypeArguments")', function() {
        // TODO: update the code to test the property genericTypeArguments
        expect(instance).to.have.property('genericTypeArguments');
        // expect(instance.genericTypeArguments).to.be(expectedValueLiteral);
      });

      it('should have the property genericParameterPosition (base name: "genericParameterPosition")', function() {
        // TODO: update the code to test the property genericParameterPosition
        expect(instance).to.have.property('genericParameterPosition');
        // expect(instance.genericParameterPosition).to.be(expectedValueLiteral);
      });

      it('should have the property genericParameterAttributes (base name: "genericParameterAttributes")', function() {
        // TODO: update the code to test the property genericParameterAttributes
        expect(instance).to.have.property('genericParameterAttributes');
        // expect(instance.genericParameterAttributes).to.be(expectedValueLiteral);
      });

      it('should have the property attributes (base name: "attributes")', function() {
        // TODO: update the code to test the property attributes
        expect(instance).to.have.property('attributes');
        // expect(instance.attributes).to.be(expectedValueLiteral);
      });

      it('should have the property isAbstract (base name: "isAbstract")', function() {
        // TODO: update the code to test the property isAbstract
        expect(instance).to.have.property('isAbstract');
        // expect(instance.isAbstract).to.be(expectedValueLiteral);
      });

      it('should have the property isImport (base name: "isImport")', function() {
        // TODO: update the code to test the property isImport
        expect(instance).to.have.property('isImport');
        // expect(instance.isImport).to.be(expectedValueLiteral);
      });

      it('should have the property isSealed (base name: "isSealed")', function() {
        // TODO: update the code to test the property isSealed
        expect(instance).to.have.property('isSealed');
        // expect(instance.isSealed).to.be(expectedValueLiteral);
      });

      it('should have the property isSpecialName (base name: "isSpecialName")', function() {
        // TODO: update the code to test the property isSpecialName
        expect(instance).to.have.property('isSpecialName');
        // expect(instance.isSpecialName).to.be(expectedValueLiteral);
      });

      it('should have the property isClass (base name: "isClass")', function() {
        // TODO: update the code to test the property isClass
        expect(instance).to.have.property('isClass');
        // expect(instance.isClass).to.be(expectedValueLiteral);
      });

      it('should have the property isNestedAssembly (base name: "isNestedAssembly")', function() {
        // TODO: update the code to test the property isNestedAssembly
        expect(instance).to.have.property('isNestedAssembly');
        // expect(instance.isNestedAssembly).to.be(expectedValueLiteral);
      });

      it('should have the property isNestedFamANDAssem (base name: "isNestedFamANDAssem")', function() {
        // TODO: update the code to test the property isNestedFamANDAssem
        expect(instance).to.have.property('isNestedFamANDAssem');
        // expect(instance.isNestedFamANDAssem).to.be(expectedValueLiteral);
      });

      it('should have the property isNestedFamily (base name: "isNestedFamily")', function() {
        // TODO: update the code to test the property isNestedFamily
        expect(instance).to.have.property('isNestedFamily');
        // expect(instance.isNestedFamily).to.be(expectedValueLiteral);
      });

      it('should have the property isNestedFamORAssem (base name: "isNestedFamORAssem")', function() {
        // TODO: update the code to test the property isNestedFamORAssem
        expect(instance).to.have.property('isNestedFamORAssem');
        // expect(instance.isNestedFamORAssem).to.be(expectedValueLiteral);
      });

      it('should have the property isNestedPrivate (base name: "isNestedPrivate")', function() {
        // TODO: update the code to test the property isNestedPrivate
        expect(instance).to.have.property('isNestedPrivate');
        // expect(instance.isNestedPrivate).to.be(expectedValueLiteral);
      });

      it('should have the property isNestedPublic (base name: "isNestedPublic")', function() {
        // TODO: update the code to test the property isNestedPublic
        expect(instance).to.have.property('isNestedPublic');
        // expect(instance.isNestedPublic).to.be(expectedValueLiteral);
      });

      it('should have the property isNotPublic (base name: "isNotPublic")', function() {
        // TODO: update the code to test the property isNotPublic
        expect(instance).to.have.property('isNotPublic');
        // expect(instance.isNotPublic).to.be(expectedValueLiteral);
      });

      it('should have the property isPublic (base name: "isPublic")', function() {
        // TODO: update the code to test the property isPublic
        expect(instance).to.have.property('isPublic');
        // expect(instance.isPublic).to.be(expectedValueLiteral);
      });

      it('should have the property isAutoLayout (base name: "isAutoLayout")', function() {
        // TODO: update the code to test the property isAutoLayout
        expect(instance).to.have.property('isAutoLayout');
        // expect(instance.isAutoLayout).to.be(expectedValueLiteral);
      });

      it('should have the property isExplicitLayout (base name: "isExplicitLayout")', function() {
        // TODO: update the code to test the property isExplicitLayout
        expect(instance).to.have.property('isExplicitLayout');
        // expect(instance.isExplicitLayout).to.be(expectedValueLiteral);
      });

      it('should have the property isLayoutSequential (base name: "isLayoutSequential")', function() {
        // TODO: update the code to test the property isLayoutSequential
        expect(instance).to.have.property('isLayoutSequential');
        // expect(instance.isLayoutSequential).to.be(expectedValueLiteral);
      });

      it('should have the property isAnsiClass (base name: "isAnsiClass")', function() {
        // TODO: update the code to test the property isAnsiClass
        expect(instance).to.have.property('isAnsiClass');
        // expect(instance.isAnsiClass).to.be(expectedValueLiteral);
      });

      it('should have the property isAutoClass (base name: "isAutoClass")', function() {
        // TODO: update the code to test the property isAutoClass
        expect(instance).to.have.property('isAutoClass');
        // expect(instance.isAutoClass).to.be(expectedValueLiteral);
      });

      it('should have the property isUnicodeClass (base name: "isUnicodeClass")', function() {
        // TODO: update the code to test the property isUnicodeClass
        expect(instance).to.have.property('isUnicodeClass');
        // expect(instance.isUnicodeClass).to.be(expectedValueLiteral);
      });

      it('should have the property isCOMObject (base name: "isCOMObject")', function() {
        // TODO: update the code to test the property isCOMObject
        expect(instance).to.have.property('isCOMObject');
        // expect(instance.isCOMObject).to.be(expectedValueLiteral);
      });

      it('should have the property isContextful (base name: "isContextful")', function() {
        // TODO: update the code to test the property isContextful
        expect(instance).to.have.property('isContextful');
        // expect(instance.isContextful).to.be(expectedValueLiteral);
      });

      it('should have the property isEnum (base name: "isEnum")', function() {
        // TODO: update the code to test the property isEnum
        expect(instance).to.have.property('isEnum');
        // expect(instance.isEnum).to.be(expectedValueLiteral);
      });

      it('should have the property isMarshalByRef (base name: "isMarshalByRef")', function() {
        // TODO: update the code to test the property isMarshalByRef
        expect(instance).to.have.property('isMarshalByRef');
        // expect(instance.isMarshalByRef).to.be(expectedValueLiteral);
      });

      it('should have the property isPrimitive (base name: "isPrimitive")', function() {
        // TODO: update the code to test the property isPrimitive
        expect(instance).to.have.property('isPrimitive');
        // expect(instance.isPrimitive).to.be(expectedValueLiteral);
      });

      it('should have the property isValueType (base name: "isValueType")', function() {
        // TODO: update the code to test the property isValueType
        expect(instance).to.have.property('isValueType');
        // expect(instance.isValueType).to.be(expectedValueLiteral);
      });

      it('should have the property isSignatureType (base name: "isSignatureType")', function() {
        // TODO: update the code to test the property isSignatureType
        expect(instance).to.have.property('isSignatureType');
        // expect(instance.isSignatureType).to.be(expectedValueLiteral);
      });

      it('should have the property isSecurityCritical (base name: "isSecurityCritical")', function() {
        // TODO: update the code to test the property isSecurityCritical
        expect(instance).to.have.property('isSecurityCritical');
        // expect(instance.isSecurityCritical).to.be(expectedValueLiteral);
      });

      it('should have the property isSecuritySafeCritical (base name: "isSecuritySafeCritical")', function() {
        // TODO: update the code to test the property isSecuritySafeCritical
        expect(instance).to.have.property('isSecuritySafeCritical');
        // expect(instance.isSecuritySafeCritical).to.be(expectedValueLiteral);
      });

      it('should have the property isSecurityTransparent (base name: "isSecurityTransparent")', function() {
        // TODO: update the code to test the property isSecurityTransparent
        expect(instance).to.have.property('isSecurityTransparent');
        // expect(instance.isSecurityTransparent).to.be(expectedValueLiteral);
      });

      it('should have the property structLayoutAttribute (base name: "structLayoutAttribute")', function() {
        // TODO: update the code to test the property structLayoutAttribute
        expect(instance).to.have.property('structLayoutAttribute');
        // expect(instance.structLayoutAttribute).to.be(expectedValueLiteral);
      });

      it('should have the property typeInitializer (base name: "typeInitializer")', function() {
        // TODO: update the code to test the property typeInitializer
        expect(instance).to.have.property('typeInitializer');
        // expect(instance.typeInitializer).to.be(expectedValueLiteral);
      });

      it('should have the property typeHandle (base name: "typeHandle")', function() {
        // TODO: update the code to test the property typeHandle
        expect(instance).to.have.property('typeHandle');
        // expect(instance.typeHandle).to.be(expectedValueLiteral);
      });

      it('should have the property guid (base name: "guid")', function() {
        // TODO: update the code to test the property guid
        expect(instance).to.have.property('guid');
        // expect(instance.guid).to.be(expectedValueLiteral);
      });

      it('should have the property baseType (base name: "baseType")', function() {
        // TODO: update the code to test the property baseType
        expect(instance).to.have.property('baseType');
        // expect(instance.baseType).to.be(expectedValueLiteral);
      });

      it('should have the property isSerializable (base name: "isSerializable")', function() {
        // TODO: update the code to test the property isSerializable
        expect(instance).to.have.property('isSerializable');
        // expect(instance.isSerializable).to.be(expectedValueLiteral);
      });

      it('should have the property containsGenericParameters (base name: "containsGenericParameters")', function() {
        // TODO: update the code to test the property containsGenericParameters
        expect(instance).to.have.property('containsGenericParameters');
        // expect(instance.containsGenericParameters).to.be(expectedValueLiteral);
      });

      it('should have the property isVisible (base name: "isVisible")', function() {
        // TODO: update the code to test the property isVisible
        expect(instance).to.have.property('isVisible');
        // expect(instance.isVisible).to.be(expectedValueLiteral);
      });

      it('should have the property genericTypeParameters (base name: "genericTypeParameters")', function() {
        // TODO: update the code to test the property genericTypeParameters
        expect(instance).to.have.property('genericTypeParameters');
        // expect(instance.genericTypeParameters).to.be(expectedValueLiteral);
      });

      it('should have the property declaredConstructors (base name: "declaredConstructors")', function() {
        // TODO: update the code to test the property declaredConstructors
        expect(instance).to.have.property('declaredConstructors');
        // expect(instance.declaredConstructors).to.be(expectedValueLiteral);
      });

      it('should have the property declaredEvents (base name: "declaredEvents")', function() {
        // TODO: update the code to test the property declaredEvents
        expect(instance).to.have.property('declaredEvents');
        // expect(instance.declaredEvents).to.be(expectedValueLiteral);
      });

      it('should have the property declaredFields (base name: "declaredFields")', function() {
        // TODO: update the code to test the property declaredFields
        expect(instance).to.have.property('declaredFields');
        // expect(instance.declaredFields).to.be(expectedValueLiteral);
      });

      it('should have the property declaredMembers (base name: "declaredMembers")', function() {
        // TODO: update the code to test the property declaredMembers
        expect(instance).to.have.property('declaredMembers');
        // expect(instance.declaredMembers).to.be(expectedValueLiteral);
      });

      it('should have the property declaredMethods (base name: "declaredMethods")', function() {
        // TODO: update the code to test the property declaredMethods
        expect(instance).to.have.property('declaredMethods');
        // expect(instance.declaredMethods).to.be(expectedValueLiteral);
      });

      it('should have the property declaredNestedTypes (base name: "declaredNestedTypes")', function() {
        // TODO: update the code to test the property declaredNestedTypes
        expect(instance).to.have.property('declaredNestedTypes');
        // expect(instance.declaredNestedTypes).to.be(expectedValueLiteral);
      });

      it('should have the property declaredProperties (base name: "declaredProperties")', function() {
        // TODO: update the code to test the property declaredProperties
        expect(instance).to.have.property('declaredProperties');
        // expect(instance.declaredProperties).to.be(expectedValueLiteral);
      });

      it('should have the property implementedInterfaces (base name: "implementedInterfaces")', function() {
        // TODO: update the code to test the property implementedInterfaces
        expect(instance).to.have.property('implementedInterfaces');
        // expect(instance.implementedInterfaces).to.be(expectedValueLiteral);
      });

    });
  });

}));
