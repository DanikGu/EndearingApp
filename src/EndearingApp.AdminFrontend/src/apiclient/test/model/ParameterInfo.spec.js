/*
 * EndearingApp.Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EndearingAppweb);
  }
}(this, function(expect, EndearingAppweb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ParameterInfo', function() {
      beforeEach(function() {
        instance = new EndearingAppweb.ParameterInfo();
      });

      it('should create an instance of ParameterInfo', function() {
        // TODO: update the code to test ParameterInfo
        expect(instance).to.be.a(EndearingAppweb.ParameterInfo);
      });

      it('should have the property attributes (base name: "attributes")', function() {
        // TODO: update the code to test the property attributes
        expect(instance).to.have.property('attributes');
        // expect(instance.attributes).to.be(expectedValueLiteral);
      });

      it('should have the property member (base name: "member")', function() {
        // TODO: update the code to test the property member
        expect(instance).to.have.property('member');
        // expect(instance.member).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property parameterType (base name: "parameterType")', function() {
        // TODO: update the code to test the property parameterType
        expect(instance).to.have.property('parameterType');
        // expect(instance.parameterType).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property isIn (base name: "isIn")', function() {
        // TODO: update the code to test the property isIn
        expect(instance).to.have.property('isIn');
        // expect(instance.isIn).to.be(expectedValueLiteral);
      });

      it('should have the property isLcid (base name: "isLcid")', function() {
        // TODO: update the code to test the property isLcid
        expect(instance).to.have.property('isLcid');
        // expect(instance.isLcid).to.be(expectedValueLiteral);
      });

      it('should have the property isOptional (base name: "isOptional")', function() {
        // TODO: update the code to test the property isOptional
        expect(instance).to.have.property('isOptional');
        // expect(instance.isOptional).to.be(expectedValueLiteral);
      });

      it('should have the property isOut (base name: "isOut")', function() {
        // TODO: update the code to test the property isOut
        expect(instance).to.have.property('isOut');
        // expect(instance.isOut).to.be(expectedValueLiteral);
      });

      it('should have the property isRetval (base name: "isRetval")', function() {
        // TODO: update the code to test the property isRetval
        expect(instance).to.have.property('isRetval');
        // expect(instance.isRetval).to.be(expectedValueLiteral);
      });

      it('should have the property defaultValue (base name: "defaultValue")', function() {
        // TODO: update the code to test the property defaultValue
        expect(instance).to.have.property('defaultValue');
        // expect(instance.defaultValue).to.be(expectedValueLiteral);
      });

      it('should have the property rawDefaultValue (base name: "rawDefaultValue")', function() {
        // TODO: update the code to test the property rawDefaultValue
        expect(instance).to.have.property('rawDefaultValue');
        // expect(instance.rawDefaultValue).to.be(expectedValueLiteral);
      });

      it('should have the property hasDefaultValue (base name: "hasDefaultValue")', function() {
        // TODO: update the code to test the property hasDefaultValue
        expect(instance).to.have.property('hasDefaultValue');
        // expect(instance.hasDefaultValue).to.be(expectedValueLiteral);
      });

      it('should have the property customAttributes (base name: "customAttributes")', function() {
        // TODO: update the code to test the property customAttributes
        expect(instance).to.have.property('customAttributes');
        // expect(instance.customAttributes).to.be(expectedValueLiteral);
      });

      it('should have the property metadataToken (base name: "metadataToken")', function() {
        // TODO: update the code to test the property metadataToken
        expect(instance).to.have.property('metadataToken');
        // expect(instance.metadataToken).to.be(expectedValueLiteral);
      });

    });
  });

}));
