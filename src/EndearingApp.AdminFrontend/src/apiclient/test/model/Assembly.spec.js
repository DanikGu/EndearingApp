/*
 * EndearingApp.Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EndearingAppweb);
  }
}(this, function(expect, EndearingAppweb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Assembly', function() {
      beforeEach(function() {
        instance = new EndearingAppweb.Assembly();
      });

      it('should create an instance of Assembly', function() {
        // TODO: update the code to test Assembly
        expect(instance).to.be.a(EndearingAppweb.Assembly);
      });

      it('should have the property definedTypes (base name: "definedTypes")', function() {
        // TODO: update the code to test the property definedTypes
        expect(instance).to.have.property('definedTypes');
        // expect(instance.definedTypes).to.be(expectedValueLiteral);
      });

      it('should have the property exportedTypes (base name: "exportedTypes")', function() {
        // TODO: update the code to test the property exportedTypes
        expect(instance).to.have.property('exportedTypes');
        // expect(instance.exportedTypes).to.be(expectedValueLiteral);
      });

      it('should have the property codeBase (base name: "codeBase")', function() {
        // TODO: update the code to test the property codeBase
        expect(instance).to.have.property('codeBase');
        // expect(instance.codeBase).to.be(expectedValueLiteral);
      });

      it('should have the property entryPoint (base name: "entryPoint")', function() {
        // TODO: update the code to test the property entryPoint
        expect(instance).to.have.property('entryPoint');
        // expect(instance.entryPoint).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "fullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property imageRuntimeVersion (base name: "imageRuntimeVersion")', function() {
        // TODO: update the code to test the property imageRuntimeVersion
        expect(instance).to.have.property('imageRuntimeVersion');
        // expect(instance.imageRuntimeVersion).to.be(expectedValueLiteral);
      });

      it('should have the property isDynamic (base name: "isDynamic")', function() {
        // TODO: update the code to test the property isDynamic
        expect(instance).to.have.property('isDynamic');
        // expect(instance.isDynamic).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property reflectionOnly (base name: "reflectionOnly")', function() {
        // TODO: update the code to test the property reflectionOnly
        expect(instance).to.have.property('reflectionOnly');
        // expect(instance.reflectionOnly).to.be(expectedValueLiteral);
      });

      it('should have the property isCollectible (base name: "isCollectible")', function() {
        // TODO: update the code to test the property isCollectible
        expect(instance).to.have.property('isCollectible');
        // expect(instance.isCollectible).to.be(expectedValueLiteral);
      });

      it('should have the property isFullyTrusted (base name: "isFullyTrusted")', function() {
        // TODO: update the code to test the property isFullyTrusted
        expect(instance).to.have.property('isFullyTrusted');
        // expect(instance.isFullyTrusted).to.be(expectedValueLiteral);
      });

      it('should have the property customAttributes (base name: "customAttributes")', function() {
        // TODO: update the code to test the property customAttributes
        expect(instance).to.have.property('customAttributes');
        // expect(instance.customAttributes).to.be(expectedValueLiteral);
      });

      it('should have the property escapedCodeBase (base name: "escapedCodeBase")', function() {
        // TODO: update the code to test the property escapedCodeBase
        expect(instance).to.have.property('escapedCodeBase');
        // expect(instance.escapedCodeBase).to.be(expectedValueLiteral);
      });

      it('should have the property manifestModule (base name: "manifestModule")', function() {
        // TODO: update the code to test the property manifestModule
        expect(instance).to.have.property('manifestModule');
        // expect(instance.manifestModule).to.be(expectedValueLiteral);
      });

      it('should have the property modules (base name: "modules")', function() {
        // TODO: update the code to test the property modules
        expect(instance).to.have.property('modules');
        // expect(instance.modules).to.be(expectedValueLiteral);
      });

      it('should have the property globalAssemblyCache (base name: "globalAssemblyCache")', function() {
        // TODO: update the code to test the property globalAssemblyCache
        expect(instance).to.have.property('globalAssemblyCache');
        // expect(instance.globalAssemblyCache).to.be(expectedValueLiteral);
      });

      it('should have the property hostContext (base name: "hostContext")', function() {
        // TODO: update the code to test the property hostContext
        expect(instance).to.have.property('hostContext');
        // expect(instance.hostContext).to.be(expectedValueLiteral);
      });

      it('should have the property securityRuleSet (base name: "securityRuleSet")', function() {
        // TODO: update the code to test the property securityRuleSet
        expect(instance).to.have.property('securityRuleSet');
        // expect(instance.securityRuleSet).to.be(expectedValueLiteral);
      });

    });
  });

}));
