/*
 * EndearingApp.Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EndearingAppweb);
  }
}(this, function(expect, EndearingAppweb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FieldDto', function() {
      beforeEach(function() {
        instance = new EndearingAppweb.FieldDto();
      });

      it('should create an instance of FieldDto', function() {
        // TODO: update the code to test FieldDto
        expect(instance).to.be.a(EndearingAppweb.FieldDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property customEntityId (base name: "customEntityId")', function() {
        // TODO: update the code to test the property customEntityId
        expect(instance).to.have.property('customEntityId');
        // expect(instance.customEntityId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property isPrimaryKey (base name: "isPrimaryKey")', function() {
        // TODO: update the code to test the property isPrimaryKey
        expect(instance).to.have.property('isPrimaryKey');
        // expect(instance.isPrimaryKey).to.be(expectedValueLiteral);
      });

      it('should have the property isNullable (base name: "isNullable")', function() {
        // TODO: update the code to test the property isNullable
        expect(instance).to.have.property('isNullable');
        // expect(instance.isNullable).to.be(expectedValueLiteral);
      });

      it('should have the property isSystemField (base name: "isSystemField")', function() {
        // TODO: update the code to test the property isSystemField
        expect(instance).to.have.property('isSystemField');
        // expect(instance.isSystemField).to.be(expectedValueLiteral);
      });

      it('should have the property isIndexed (base name: "isIndexed")', function() {
        // TODO: update the code to test the property isIndexed
        expect(instance).to.have.property('isIndexed');
        // expect(instance.isIndexed).to.be(expectedValueLiteral);
      });

      it('should have the property isUnique (base name: "isUnique")', function() {
        // TODO: update the code to test the property isUnique
        expect(instance).to.have.property('isUnique');
        // expect(instance.isUnique).to.be(expectedValueLiteral);
      });

      it('should have the property isRequired (base name: "isRequired")', function() {
        // TODO: update the code to test the property isRequired
        expect(instance).to.have.property('isRequired');
        // expect(instance.isRequired).to.be(expectedValueLiteral);
      });

      it('should have the property isFullTextSearch (base name: "isFullTextSearch")', function() {
        // TODO: update the code to test the property isFullTextSearch
        expect(instance).to.have.property('isFullTextSearch');
        // expect(instance.isFullTextSearch).to.be(expectedValueLiteral);
      });

      it('should have the property optionSetDefinitionId (base name: "optionSetDefinitionId")', function() {
        // TODO: update the code to test the property optionSetDefinitionId
        expect(instance).to.have.property('optionSetDefinitionId');
        // expect(instance.optionSetDefinitionId).to.be(expectedValueLiteral);
      });

    });
  });

}));
